INFORME DE CONFIGURACIONES DE SEGURIDAD
======================================

Fecha: 24/05/2025

1. Autenticación y Control de Acceso
------------------------------------
- El sistema utiliza autenticación de usuarios mediante sesiones Flask (`session['usuario']`).
- Las rutas administrativas y de gestión (`/panel`, `/gestion`, `/anuncios`, y API de gestión) requieren usuario autenticado.
- El cierre de sesión elimina la variable de sesión, previniendo accesos no autorizados tras logout.

2. Gestión Segura de Contraseñas
-------------------------------
- Las contraseñas de usuarios se almacenan usando el algoritmo de hash bcrypt (seguro y resistente a ataques de fuerza bruta).
- El login compara el hash almacenado con el hash de la contraseña ingresada.
- El script `crea_usuario.py` también utiliza bcrypt para almacenar contraseñas.

3. Validación de Datos y SQL Seguro
-----------------------------------
- Todos los endpoints POST validan que los campos requeridos estén presentes antes de operar sobre la base de datos.
- Se utiliza SQL parametrizado en todas las consultas, previniendo inyección SQL.
- No se exponen contraseñas ni información sensible en las respuestas de la API.

4. Manejo de Errores y Feedback Seguro
--------------------------------------
- Los errores de base de datos y autenticación devuelven mensajes claros y códigos HTTP apropiados (401, 400, 404).
- El frontend muestra mensajes de error visuales al usuario en caso de problemas de conexión o errores de la API.
- El botón de agregar libro se deshabilita durante la petición para evitar envíos duplicados.

5. Gestión de Sesiones
----------------------
- Uso de `app.secret_key` para proteger la cookie de sesión.
- Logout elimina la sesión.

6. Scripts Auxiliares
---------------------
- Los scripts de administración y migración (`crea_usuario.py`, `corregir_tablas.py`, `crear_tablas_libros.py`, `excel_a_sql.py`) están diseñados para uso local del administrador y no exponen rutas web.
- Uso de SQL parametrizado en operaciones de base de datos.

7. Frontend
-----------
- No se exponen datos sensibles en el frontend.
- El feedback de errores y éxito es claro y no revela detalles internos del sistema.
- No se permite la gestión de libros ni anuncios a usuarios no autenticados.

8. Base de Datos
----------------
- Usuarios y libros/anuncios están en bases de datos separadas.
- Tablas de libros por sección, todas con columna `id` autoincremental.
- No se almacena información sensible de usuarios en la base de datos de libros.

---

[24/05/2025] Mejoras recientes aplicadas al sistema:

1. Eliminación de endpoints y lógica redundante:
   - Se eliminaron los endpoints y lógica que usaban la tabla 'libros' global, dejando solo la gestión por tablas de sección (libros_000, libros_100, etc.), evitando inconsistencias y posibles errores de acceso a tablas inexistentes.

2. Decorador de autenticación:
   - Se implementó un decorador `login_required` para proteger rutas que requieren autenticación, centralizando la comprobación de sesión y evitando repeticiones de código, lo que reduce el riesgo de errores y mejora la mantenibilidad.

3. Organización y claridad:
   - Se añadieron comentarios claros para separar secciones del código, facilitando la revisión y futuras auditorías de seguridad.

4. Limpieza de código repetido:
   - Se eliminó la comprobación manual de sesión en cada vista protegida, usando el decorador para mayor robustez y menor superficie de error.

5. Migración de la tabla anuncios:
   - Se migró la tabla `anuncios` a la base de datos principal (`basedatos.db`), centralizando la gestión y mejorando la integridad de los datos.

Recomendaciones de seguridad adicionales:
- Usar una `secret_key` robusta y almacenada en variables de entorno en producción.
- Implementar protección CSRF en formularios y endpoints sensibles.
- Configurar expiración de sesión y logging de intentos de login.
- Usar HTTPS en producción para proteger la transmisión de datos.

Estas acciones refuerzan la seguridad, organización y mantenibilidad del sistema de gestión de la biblioteca virtual.

Recomendaciones Adicionales
--------------------------
- Usar HTTPS en producción.
- Implementar protección CSRF en formularios (por ejemplo, usando Flask-WTF).
- Limitar intentos de login para evitar ataques de fuerza bruta.
- Revisar permisos de archivos y bases de datos en el servidor.
- Mantener actualizadas las dependencias de Python y JS.
- Revisar y auditar periódicamente los logs de acceso y errores.

---

[26/05/2025] Mejoras y correcciones recientes:

1. Corrección y migración de tablas de libros:
   - Se implementaron scripts para normalizar y migrar la estructura de todas las tablas de libros (libros_000 a libros_900), asegurando la presencia de todas las columnas requeridas y el campo id autoincremental, incluso después de importaciones desde Excel.
   - Se automatizó la eliminación de tablas temporales (_old) para evitar bloqueos y errores de migración.
   - Se garantiza que la columna 'codigo' acepte cualquier carácter (números, letras, símbolos como . / , -) sin errores ni restricciones innecesarias.

2. Importación robusta desde Excel:
   - El importador de Excel ahora reconoce nombres alternativos de columnas (por ejemplo, 'código', 'Codigo', 'portada', 'categoría', etc.) y los normaliza automáticamente, evitando errores por encabezados inconsistentes.
   - Se asegura la conservación de datos al corregir la estructura, evitando pérdidas tras la importación.

3. Manejo de errores y consistencia:
   - Se mejoró la detección y limpieza de tablas temporales para evitar conflictos en migraciones repetidas.
   - Se reforzó la validación de estructura y la migración de datos para que el sistema siempre funcione tras cualquier importación o corrección.

Estas acciones refuerzan la robustez, la integridad de los datos y la experiencia de administración, minimizando errores y facilitando la recuperación ante fallos o inconsistencias en la base de datos.
